services:
  postgres:
    image: pgvector/pgvector:pg17
    container_name: postgres_with_pgvector
    environment:
      POSTGRES_DB: booquest
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Rlarldnd1!
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  valkey:
    image: valkey/valkey:latest
    container_name: valkey
    ports:
      - "6379:6379"
    volumes:
      - valkey_data:/data
    healthcheck:
      test: ["CMD", "valkey-cli", "PING"]
      interval: 5s
      timeout: 3s
      retries: 10

  api:
    build:
      context: .
      dockerfile: docker/api.Dockerfile
    container_name: ai_api
    command: >
      uvicorn apps.api.main:app
      --host 0.0.0.0
      --port 8081
      --timeout-keep-alive 75
    volumes:
      - .:/app
    env_file: config/.env  
    environment:
      - PYTHONPATH=/app
    depends_on:
      postgres:
        condition: service_healthy
      valkey:
        condition: service_healthy
    ports:
      - "8081:8081"
    restart: unless-stopped

  worker:
    build:
      context: .
      dockerfile: docker/worker.Dockerfile
    container_name: ai_worker
    # 현재 구조에 맞게 수정
    command: >
      celery -A packages.presentation.worker.celery_app.celery_app
      worker -l info
      -Q ai,trends
    volumes:
      - .:/app
    env_file: config/.env  
    environment:
      - PYTHONPATH=/app
    depends_on:
      postgres:
        condition: service_healthy
      valkey:
        condition: service_healthy
    restart: unless-stopped

  celery-beat:
    build:
      context: .
      dockerfile: docker/worker.Dockerfile
    container_name: ai_celery_beat
    command: >
      celery -A packages.presentation.worker.celery_app.celery_app
      beat -l info
    volumes:
      - .:/app
    env_file: config/.env  
    environment:
      - PYTHONPATH=/app
    depends_on:
      postgres:
        condition: service_healthy
      valkey:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres_data:
  valkey_data:
